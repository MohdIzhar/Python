Implementing Collection using TDD - Test Driven Development approach.

Container - in , not in 
Sized
Iterable
Sequence
Set - various set operation intersection, union, etc

Lets build SortedSet Collection that Implements all these 5 protocols that have distinct element and constructible from an element.

Two files:
    test_sorted_set.py
    sorted_set.py

Testing iterable with generator is best way.
---------------------------------------------------------------------------------------------------------------------------------------------

Part:- 1

# Running this piece of code without implementing the __contains__() will throw error (try)

class TestContainerProtocol(unittest.TestCase):
    def setUp(self):
        self.s = SortedSet([6,7,3,9])

    def test_positive_contained(self):
        self.assertTrue(6 in self.s)
    
    def test_negative_contained(self):
        self.assertFalse(2 in self.s)

    def test_positive_not_contained(self):
        self.assertTrue(5 not in self.s)

    def test_negative_not_contained(self):
        self.assertFalse(8 in self.s)

# In sorted_set.py implementing __contains__()

    def __contains__(self, item):
        return item in self._items

> run tests // now passes all

-----------------------------------------------------------------------------------------------------

Part:- 2 (Sized Protocol)

Must not consume or modify Collection
use of len(items) function

class TestSizedProtocol(unittest.TestCase):
    def test_empty(self):
        s = SortedSet()
        self.assertEqual(len(s),0)

    def test_one(self):
        s = SortedSet([9972])
        self.assertEqual(len(s),1)

    def test_ten(self):
        s = SortedSet(range(10))
        self.assertEqual(len(s),10)

    def test_with_duplicates(self):
        s = SortedSet([99,99,99])
        self.assertEqual(len(s),1)

# Running this will fail test cases
# In sorted_set.py

    def __len__(self):
        return len(self._items)

Note: all the test cases passes except test_with_duplicates one because the SortedSet dont check for unique items
      To make this pass: self._items = sorted(set(items))

Now run all TestCase passes

----------------------------------------------------------------------------------------------------------------------------------

Part:- 3 (Iterable Protocol - __iter__ )

# takes an iterable

class TestIterableProtocol(unittest.TestCase):
    def setUp(self):
        self.s = SortedSet([7,2,1,1,9])

    def test_iter(self):
        i = iter(self.s)
        self.assertEqual(next(i),1)
        self.assertEqual(next(i),2)
        self.assertEqual(next(i),7)
        self.assertEqual(next(i),9)
        self.assertRaises(StopIteration, lambda: next(i))

    def test_for_loop(self):
        index = 0
        expected = [1,2,7,9]
        for item in self.s:
            self.assertEqual(item, expected[index])
            index += 1

# Running TestCase will fail because of not iterable

    def __iter__(self):
        return iter(self._items)
        or use this:
        for item in self._items:
            yield item 
        this is generator and likely to be slow but both approach works

------------------------------------------------------------------------------------------------------------------

Part:- 4 (Sequence Protocol - __getitem__ )

Sequence protocols - index, slicing

class TestSequenceProtocol(unittest.TestCase):
    def setUp(self):
        self.s = SortedSet([1,4,9,13,15])

    def test_index_zero(self):
        self.assertEqual(self.s[0],1)

    def test_index_four(self):
        self.assertEqual(self.s[4],15)

    def test_index_one_beyond_end(self):
        with self.assertRaises(IndexError):
            self.s[5]

    def test_index_minus_one(self):
        self.assertEqual(self.s[-1],15)

    def test_index_minus_five(self):
        self.assertEqual(self.s[-5],1)

    def test_index_one_beyond_beginning(self):
        with self.assertRaises(IndexError):
            self.s[-6]

# Running TestCase will fail

    def __getitem__(self, index):
        return self._items[index]

# slicing implementions
                                       +--> because slicing returns the sorted_set
    def test_slice_from_start(self):   |
        self.assertEqual(self.s[:3], SortedSet([1,4,9]))

    def test_slice_to_end(self):
        self.assertEqual(self.s[3:], SortedSet([13,15]))

    def test_slice_empty(self):
        self.assertEqual(self.s[10:], SortedSet())

    def test_slice_arbitrary(self):
        self.assertEqual(self.s[2:4], SortedSet([9,13]))

    def test_slice_full(self):
        self.assertEqual(self.s[:], self.s)

# Running slicing will fail TestCase

    def __getitem__(self, index):
        result = self._items[index]
        return SortedSet(result) if isinstance(index, slice) else result
        
Note: the will fail again but now for different reason of slicing

-------------------------------------------------------------------------------

Part:- 5 (Repr protocol for debuging - __repr__ )

class TestReprProtocol(unittest.TestCase):
    def test_repr_empty(self):
        s = SortedSet()
        self.assertEqual(repr(s), "SortedSet()")

    def test_repr_some(self):
        s = SortedSet([42,48,19])
        self.assertEqual(repr(s), "SortedSet([19, 40, 48])")

# now total 7 cases will fail - 5 slicing and two repr

    def __repr__(self):
        return "SortedSet({})".format(
            repr(self._items) if self._items else ''
        )

# Now Running TestCase will pass repr tests cases
But their is another issue.


class TestEqualityProtocol(unittest.TestCase):
    def test_positive_equal(self):
        self.assertTrue(SortedSet([4,5,6]) == SortedSet([6,5,4]))

    def test_negative_equal(self):
        self.assertFalse(SortedSet([1,2,3]) == SortedSet([6,5,4]))

    def test_type_mismatch(self):
        self.assertFalse(SortedSet([4,5,6]) == [4,5,6])

    def test_identical(self):
        s  = SortedSet([10,11,12])
        self.assertTrue(s == s)

# Running TestCase fails

    def __eq__(self,rhs):
        return self._items == rhs._items

    Note:- type test_type_mismatch will still fail
        def __eq__(self,rhs):
        if not isinstance(rhs, SortedSet):
            return NotImplemented
        return self._items == rhs._items

Now all TestCase passes
------------------------------------------------------------------------------------------------

Part: 6-7 (Equality and Inequality Protocol - __eq__ )

class TestInequalityProtocol(unittest.TestCase):
    def test_positive_unequal(self):
        self.assertTrue(SortedSet([4,5,6]) != SortedSet([1,2,3]))

    def test_negative_unequal(self):
        self.assertFalse(SortedSet([4,5,6]) != SortedSet([6,5,4]))

    def test_type_mismatch(self):
        self.assertTrue(SortedSet([1,2,3]) != [1,2,3])

    def test_identical(self):
        s  = SortedSet([10,11,12])
        self.assertFalse(s != s)


# this will pass all TestCase by negating the __eq__ protocol
# best practice is to write __ne__ :
----------------------------------------------------------------------------------

Part:- 8 Index Protocol & Reversed Protocol

Implementing it in Sequence Protocol

def test_reversed(self):
        s = SortedSet([1,3,5,7])
        r = reversed(s)
        self.assertEqual(next(r),7)
        self.assertEqual(next(r),5)
        self.assertEqual(next(r),3)
        self.assertEqual(next(r),1)
        with self.assertRaises(StopIteration):
            next(r)
    
    def test_index_positive(self):
        s = SortedSet([1,5,8,9])
        self.assertEqual(s.index(8),2)

    def test_index_negative(self):
        s = SortedSet([1,5,8,9])
        with self.assertRaises(ValueError):
            s.index(15)

# Running TestCase will fail

-> in sorted_set.py

from collections.abc import Sequence        // refer to doc for details

class SortedSet(Sequence):

-----------------------------------------------------------
    def test_count_zero(self):
        s = SortedSet([1,5,7,9])
        self.assertEqual(s.count(11),0)

    def test_count_one(self):
        s = SortedSet([1,5,7,9])
        self.assertEqual(s.count(7),1)


# for more info about collections refer to docs
--------------------------------------------------------------
Part:- 9 (concatenation and repetition protocols)

    def test_concatenate_disjoint(self):
        s = SortedSet([1,2,3])
        t = SortedSet([4,5,6])
        self.assertEqual(s+t, SortedSet([1,2,3,4,5,6]))
        
    def test_concatenate_equal(self):
        s = SortedSet([2,4,6])
        self.assertEqual(s+s, s)

    def test_concatenate_intersecting(self):
        s = SortedSet([1,2,3])
        t = SortedSet([3,4,5])
        self.assertEqual(s+t, SortedSet([1,2,3,4,5]))

# Running TestCase will fail

    def __add__(self, rhs):
        return SortedSet(chain(self._items, rhs._items))
     
-------------------------------------------------------------------------------

    def test_repetition_zero(self):
        s = SortedSet([4,5,6])
        self.assertEqual(0*s, SortedSet())

    def test_repetition_nonzeror(self):
        s = SortedSet([4,5,6])
        self.assertEqual(100*s, s)


# fail Running TestCase

    def __mul__(self, rhs):
        return self if rhs > 0 else SortedSet()

    def __rmul__(self, lhs):
        return self * lhs

-------------------------------------------------------------------------

Part:- 10  (Set Protocol)

class TestSetRelationalMethods(unittest.TestCase):
    def test_issubset_proper_positive(self):
        s = SortedSet({1,2})
        t = [1,2,3]
        self.assertTrue(s.issubset(t))

    def test_issubset_positive(self):
        s = SortedSet({1,2,3})
        t = [1,2,3]
        self.assertTrue(s.issubset(t))

    def test_issubset_negative(self):
        s = SortedSet({1,2,3})
        t = [1,2]
        self.assertFalse(s.issubset(t))

    def test_issuperset_proper_positive(self):
        s = SortedSet({1,2,3})
        t = [1,2]
        self.assertTrue(s.issuperset(t))

    def test_issuperset_positive(self):
        s = SortedSet({1,2,3})
        t = [1,2,3]
        self.assertTrue(s.issuperset(t))

    def test_issuperset_negative(self):
        s = SortedSet({1,2})
        t = [1,2,3]
        self.assertFalse(s.issuperset(t))

# fails TestCases

Note:- Similarly we can add all the set operation TestCases difference, symmetric_difference, intersection, etc.

Rather implementing the all __dunder__ function for Set protocols just inherit from collections.abc module like we inherited Sequence

Note: inheriting Set will work in operators cases not in iterable cases

# use self on left hand side always in these set protocol cases
    def issubset(self,iterable):
        return self <= SortedSet(iterable)

    def issuperset(self,iterable):
        return self >= SortedSet(iterable)
    
    def intersection(self, iterable):
        return self & SortedSet(iterable)

    def union(self, iterable):
        return self | SortedSet(iterable)

    def symmetric_differnce(self, iterable):
        return self ^ SortedSet(iterable)

    def differnce(self, iterable):
        return self - SortedSet(iterable)
